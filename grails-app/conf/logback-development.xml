<configuration scan="true" scanPeriod="60 seconds">

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level - %-32.42logger : %ex{16}%replace(%msg){'Stacktrace follows:','See errors.log for full stacktrace.'}%n</pattern>
        </encoder>

        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>
                    <!-- logback-development.xml for details -->
                    <!-- hibernate -->
                    if (formattedMessage.contains("HHH020003")) return true;
                    if (formattedMessage.contains("HHH020008")) return true;
                    if (formattedMessage.contains("HHH90000022")) return true;
                    if (formattedMessage.contains("HHH90001005")) return true;
                    <!-- warn -->
                    if (formattedMessage.contains("Replaced rule for '")) return true;
                    if (formattedMessage.contains("299 Elasticsearch-7.17.")) return true;
                    <!-- info -->
                    if (formattedMessage.contains("(for example: not eligible for auto-proxying)")) return true;
                    if (formattedMessage.contains("As of Liquibase 4.0, cannot set resource accessor on")) return true;
                    if (formattedMessage.contains("Cached entry expired :")) return true;
                    <!-- -->
                    return false;
                </expression>
            </evaluator>
            <OnMismatch>NEUTRAL</OnMismatch>
            <OnMatch>DENY</OnMatch>
        </filter>
    </appender>

    <!-- development only -->

    <timestamp key="date" timeReference="contextBirth" datePattern="yyyy-MM-dd"/>

    <appender name="FULL_STACKTRACE" class="ch.qos.logback.core.FileAppender">
        <file>logs/errors.log</file>
        <encoder>
            <pattern>%n%d{yyyy-MM-dd HH:mm:ss.SSS} - %-5level [%t] %logger{42} [%file:%line] : %msg%n</pattern>
        </encoder>
    </appender>

    <appender name="LOGFILE" class="ch.qos.logback.core.FileAppender">
        <file>logs/${date}.log</file>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} - %-5level [%t] [%file:%line] : %ex{short}%replace(%msg){'Stacktrace follows:','See errors.log for full stacktrace.'}%n</pattern>
        </encoder>

        <filter class="ch.qos.logback.core.filter.EvaluatorFilter">
            <evaluator class="ch.qos.logback.classic.boolex.JaninoEventEvaluator">
                <expression>
                    if (formattedMessage.contains("HHH020003")) return true;
                    <!-- WARN: Cache[..] Key[..] A soft-locked cache entry was expired by the underlying cache. If this happens regularly you should consider increasing the cache timeouts and/or capacity limits -->
                    if (formattedMessage.contains("HHH020008")) return true;
                    <!-- WARN: Hibernate's legacy org.hibernate.Criteria API is deprecated; use the JPA javax.persistence.criteria.CriteriaQuery instead -->
                    if (formattedMessage.contains("HHH90000022")) return true;
                    <!-- INFO: Cache[..] Key[..] A soft-locked cache entry was expired by the underlying cache. If this happens regularly you should consider increasing the cache timeouts and/or capacity limits -->
                    if (formattedMessage.contains("HHH90001005")) return true;
                    <!-- WARN: Replaced rule for '[..]' and ConfigAttributes [..] with ConfigAttributes [..] -->
                    if (formattedMessage.contains("Replaced rule for '")) return true;
                    <!-- WARN: request [..] returned 1 warnings: [299 Elasticsearch-7.17.27 ..] -->
                    if (formattedMessage.contains("299 Elasticsearch-7.17.")) return true;
                    <!-- INFO: Bean '[..]' of type [..] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying) -->
                    if (formattedMessage.contains("(for example: not eligible for auto-proxying)")) return true;
                    <!-- INFO: As of Liquibase 4.0, cannot set resource accessor on [..]. Must add it to the Scope -->
                    if (formattedMessage.contains("As of Liquibase 4.0, cannot set resource accessor on")) return true;
                    <!-- INFO: Cached entry expired : [..] -->
                    if (formattedMessage.contains("Cached entry expired :")) return true;
                    <!-- -->
                    return false;
                </expression>
            </evaluator>
            <OnMismatch>NEUTRAL</OnMismatch>
            <OnMatch>DENY</OnMatch>
        </filter>
    </appender>

    <!-- errors -->

    <logger name="StackTrace" level="ERROR" additivity="false">
        <appender-ref ref="FULL_STACKTRACE" />
    </logger>

    <!-- daily -->

    <logger name="de.laser" level="DEBUG" additivity="false">
        <appender-ref ref="LOGFILE" />
    </logger>

    <root level="INFO">
        <appender-ref ref="LOGFILE" />
    </root>

    <!-- default -->

    <logger name="de.laser" level="DEBUG" additivity="false">
        <appender-ref ref="STDOUT" />
    </logger>

    <root level="INFO">
        <appender-ref ref="STDOUT" />
    </root>

</configuration>
