import java.text.SimpleDateFormat

version '3.4.19'
group 'de.laser'

// ---[ build script ]---

buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/grails/core' }
    }
    dependencies {
        classpath 'org.grails:grails-gradle-plugin:' + grailsGradlePluginVersion            // 2024
        classpath 'org.grails.plugins:hibernate5:' + gormVersion                            // 2024
        classpath 'org.grails.plugins:database-migration:4.2.1'                             // 2023
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:4.3.0'                     // 2023
        classpath 'com.gorylenko.gradle-git-properties:gradle-git-properties:2.4.2'         // 2024
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.51.0'                      // 2024

        // -- dependency resolving issue
        classpath 'org.quartz-scheduler:quartz:2.3.2'                                       // 2019
    }
}

// ---[ applying plugins ]---

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.grails.grails-web'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'com.bertramlabs.asset-pipeline'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.gorylenko.gradle-git-properties'

// ---[ plugin: database migration ! before dependencies configuration ]---

sourceSets {
    main {
        resources { srcDir 'grails-app/migrations' }
    }
}

// ---[ config ]---

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}
configurations {
    configureEach {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name in ['asset-pipeline-core', 'asset-pipeline-grails']) {
                // override dependency from org.grails.plugins:cache
                details.useVersion '4.3.0' // upgrade from 3.x
            }
        }
    }
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-starter-tomcat'

    compileOnly 'io.micronaut:micronaut-inject-groovy'
    console 'org.grails:grails-console'

    implementation 'org.springframework.boot:spring-boot-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
//    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    implementation 'org.grails:grails-core'
    implementation 'org.grails:grails-web-boot'
    implementation 'org.grails:grails-logging'
    implementation 'org.grails:grails-plugin-rest'
    implementation 'org.grails:grails-plugin-databinding'
    implementation 'org.grails:grails-plugin-i18n'
    implementation 'org.grails:grails-plugin-services'
    implementation 'org.grails:grails-plugin-url-mappings'
    implementation 'org.grails:grails-plugin-interceptors'
    implementation 'org.grails.plugins:cache'
    implementation 'org.grails.plugins:async'
    implementation 'org.grails.plugins:scaffolding'
    implementation 'org.grails.plugins:events'
    implementation 'org.grails.plugins:hibernate5:' + gormVersion
    implementation 'org.grails.plugins:gsp'

    implementation 'io.micronaut:micronaut-http-client'

    // --------------------------------------------------

    implementation 'org.elasticsearch:elasticsearch:7.17.22'                                // 2024
    implementation 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.17.22'  // 2024

    implementation 'org.grails.plugins:spring-security-core:6.1.1'          // 2024
    implementation 'org.grails.plugins:audit-logging:4.0.3'                 // 2021
    implementation 'org.grails.plugins:database-migration:4.2.1', {         // 2023
        exclude module: 'spring-boot-cli'
    }
    implementation 'org.grails.plugins:grails-executor:0.4'                 // 2016 : [deprecated]
    implementation 'org.grails.plugins:mail:3.0.0'                          // 2021
    implementation 'org.grails.plugins:quartz:3.0.0'                        // 2024
    implementation 'org.grails.plugins:wkhtmltopdf:1.0.0.RC9'               // 2018

    implementation 'org.hibernate:hibernate-core:5.6.15.Final'              // 2023
    implementation 'org.hibernate:hibernate-ehcache:5.6.15.Final'           // 2023 : + org.hibernate:hibernate-core:5.6.15.Final
    implementation 'net.sf.ehcache:ehcache:2.10.9.2'                        // 2021
//    implementation 'org.hibernate:hibernate-jcache:5.6.15.Final'            //        replacement for hibernate-ehcache:5.6.14.Final
//    implementation 'org.ehcache:ehcache:3.10.8'                             //        replacement for net.sf.ehcache:ehcache:2.10.9.2

    implementation 'commons-io:commons-io:2.14.0'                           // 2023
    implementation 'com.github.albfernandez:juniversalchardet:2.5.0'        // 2024
    implementation 'io.github.gpc:asynchronous-mail:3.1.2'                  // 2023
    implementation 'org.apache.commons:commons-lang3:3.14.0'                // 2023
    implementation 'org.apache.poi:poi-ooxml:3.17'                          // 2017 : [freeze] : 5.x available
    implementation 'org.codehaus.gpars:gpars:1.2.1'                         // 2014
    implementation 'org.codehaus.janino:janino:3.1.12'                      // 2024 : logback
    implementation 'org.liquibase:liquibase-core:4.19.0'                    // 2023 : + org.grails.plugins:database-migration // [freeze - not 4.19.1]
    implementation 'org.quartz-scheduler:quartz:2.3.2'                      // 2019

    // --------------------------------------------------

    runtimeOnly 'org.apache.tomcat:tomcat-jdbc'
    runtimeOnly 'javax.xml.bind:jaxb-api:2.3.1'                             // 2018 : [?]
    runtimeOnly 'org.postgresql:postgresql:42.7.3'                          // 2024
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

springBoot {
    mainClass = 'de.laser.Application'
}

bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always', 
        '-noverify', 
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// ---[ plugin: gradle-git-properties ]---

gitProperties {
    dateFormat = "dd-MM-yyyy'T'HH:mm:ssZ"
    //dateFormatTimeZone = "PST"
    gitPropertiesDir = new File("${project.rootDir}/")
}

// ---[ war ]---

tasks.register('war.updateBuildInfo', Task) {
    group 'laser'

    doFirst {
        Properties properties = new Properties()
        properties.setProperty('info.app.build.date', new SimpleDateFormat('dd.MM.yyyy HH:mm').format(new Date()))
        properties.setProperty('info.app.build.host', InetAddress.localHost.hostName)
        properties.setProperty('info.app.build.javaVersion', System.getProperty('java.version'))

        try {
            File gitProperties = new File("${project.rootDir}/git.properties")
            gitProperties.withInputStream { properties.load(it) } // read props from file

            File grailsBuildInfo = new File("${project.buildDir}/resources/main/META-INF/grails.build.info")
            grailsBuildInfo.withInputStream { properties.load(it) } // read props from file

            grailsBuildInfo.withOutputStream { properties.store(it, null) } // write back to file
        }
        catch (Exception e) {
        }
    }
}

war {
    enabled = true
    archiveBaseName = 'laser3'
    archiveFileName = 'laser3.war'
    duplicatesStrategy = DuplicatesStrategy.WARN
    rootSpec.exclude(
            // '**/h2-*.jar',
            '**/groovy-groovydoc-*.jar'
    )
    dependsOn compileGroovyPages
    dependsOn 'war.updateBuildInfo'
}

// ---[ plugin: asset pipeline ]---

assets {
    minifyJs = true
    minifyCss = true
    minifyOptions = [
            languageMode:   'ES6',
            targetLanguage: 'ES5_STRICT'
    ]
    skipNonDigests = true
    maxThreads = 8

    from '/themes'
    excludes = [
            // images/*
            // javascripts/*
            'libs/**',
            'modules/**',
            // themes/*
            'accessibility/**',
            'javascript/**',
            'laser/**',
            // vendor/*
            'crypto-js-4.1.1/**',
            'echarts/**',
            'spring-websocket/**', // tmp deactivated
            'swagger-ui/**',
    ]
}

// ---[ gradle tasks ]---

apply from: 'laserTasks.gradle'

tasks.withType(GroovyCompile).configureEach {
    configure(groovyOptions) { forkOptions.jvmArgs = ['-Xmx1024m'] }
}
