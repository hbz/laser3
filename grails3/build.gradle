buildscript {
    repositories {
        mavenLocal()
        maven { url 'https://repo.grails.org/core' }
    }
    // https://github.com/n0mer/gradle-git-properties/issues/195
    configurations.all {
        resolutionStrategy.force "org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r"
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath 'org.grails.plugins:database-migration:3.1.0'             // from 3.0.3 : 4.x available
        classpath 'com.bertramlabs.plugins:asset-pipeline-gradle:3.2.5'     // from 2.15.1
        classpath 'gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.4'
    }
}

// --- plugins

apply plugin:'eclipse'
apply plugin:'idea'
apply plugin:'war'
apply plugin:'org.grails.grails-web'
apply plugin:'org.grails.grails-gsp'
apply plugin:'asset-pipeline'
apply plugin:'com.gorylenko.gradle-git-properties'

// --- config

version '2.2.10'
group 'laser2'

repositories {
    mavenLocal()
    maven { url 'https://repo.grails.org/core' }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-logging'
    compile 'org.springframework.boot:spring-boot-autoconfigure'
    compile 'org.grails:grails-core'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-tomcat'
    compile 'org.grails:grails-web-boot'
    compile 'org.grails:grails-logging'
    compile 'org.grails:grails-plugin-rest'
    compile 'org.grails:grails-plugin-databinding'
    compile 'org.grails:grails-plugin-i18n'
    compile 'org.grails:grails-plugin-services'
    compile 'org.grails:grails-plugin-url-mappings'
    compile 'org.grails:grails-plugin-interceptors'
    compile 'org.grails.plugins:cache'
    compile 'org.grails.plugins:async'
    compile 'org.grails.plugins:scaffolding'
    compile 'org.grails.plugins:events'
    compile 'org.grails.plugins:hibernate5'
    compile 'org.hibernate:hibernate-core:5.1.17.Final'             // from 5.1.16.Final : 5.4.x available
    // ++ compile 'org.hibernate:hibernate-core:5.2.18.Final'       // from 5.1.16.Final : 5.4.x available
    compile 'org.grails.plugins:gsp'
    console 'org.grails:grails-console'
    compile 'com.bertramlabs.plugins:asset-pipeline-grails:3.2.5'   // from 3.0.9 ; changed: runtime -> compile
    profile 'org.grails.profiles:web'
    runtime 'org.apache.tomcat:tomcat-jdbc'
//    testCompile 'org.grails:grails-gorm-testing-support'
//    testCompile 'org.grails.plugins:geb'
//    testCompile 'org.grails:grails-web-testing-support'
//    testCompile 'org.grails.plugins:geb:1.1.2'
//    testRuntime 'org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1'
//    testRuntime 'net.sourceforge.htmlunit:htmlunit:2.18'
//    testRuntime 'org.seleniumhq.selenium:selenium-chrome-driver:2.47.1'

    // --- legacy
    // --------------------------------------------------
    compile 'org.grails:grails-docs:3.3.11'

    // https://mvnrepository.com/artifact/org.elasticsearch.client/elasticsearch-rest-high-level-client
    compile 'org.elasticsearch:elasticsearch:7.4.2'
    compile 'org.elasticsearch.client:elasticsearch-rest-high-level-client:7.4.2'

    // https://grails-plugins.github.io/grails-spring-security-core/
    compile 'org.grails.plugins:spring-security-core:3.2.3'

    // https://github.com/bobbywarner/grails-http-builder-helper
    compile 'org.grails.plugins:http-builder-helper:1.1.0'

    // https://github.com/symentis/grails-audit-logging-plugin/
    compile 'org.grails.plugins:audit-logging:3.0.6'        // from 3.0.3 : 4.x available

    // https://github.com/grails/grails-database-migration
    compile 'org.grails.plugins:database-migration:3.1.0'   // from 3.0.3 : 4.x available

    compile 'org.grails.plugins:grails-executor:0.4'
    compile 'org.grails.plugins:mail:2.0.0'
    compile 'org.grails.plugins:quartz:2.0.13'
    compile 'org.hibernate:hibernate-ehcache:5.1.17.Final'  // from 5.1.16.Final : 5.4.x available
    // ++ compile 'org.hibernate:hibernate-ehcache:5.2.18.Final'  // from 5.1.16.Final : 5.4.x available
    compile 'org.grails.plugins:wkhtmltopdf:1.0.0.RC9'

    // --- apache stuff
    compile 'commons-io:commons-io:2.11.0'                  // from 2.6
    compile 'commons-fileupload:commons-fileupload:1.4'     // from 1.3.3
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-lang3:3.12.0'       // from 3.9
    compile 'org.apache.httpcomponents:httpmime:4.5.13'     // from 4.5.4
    compile 'org.apache.poi:poi-ooxml:3.17'                 // from 3.9 : 5.x available

    // --- other stuff
    compile 'com.github.albfernandez:juniversalchardet:2.4.0'   // from 2.3.0
    compile 'com.opencsv:opencsv:4.6'                           // from 3.7 : 5.x available
    compile 'gov.loc:bagit:4.12.3'                              // from 4.0 : 5.x available
    compile 'org.codehaus.gpars:gpars:1.2.1'
    compile 'org.liquibase:liquibase-core:3.10.1'               // from 3.5.5 (@ 3.0.3) - org.grails.plugins:database-migration:3.1.0

    runtime 'org.postgresql:postgresql:42.3.3'                  // from 42.3.0
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always')
    addResources = true
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

// --- plugin: gradle-git-properties

gitProperties {
    //keys = ['git.branch','git.commit.id','git.commit.time']
    dateFormat = "dd-MM-yyyy'T'HH:mm:ssZ"
    //dateFormatTimeZone = "PST"
    gitPropertiesDir = new File("${project.rootDir}/")
}

// --- config: war file --->

buildProperties {
    inputs.property('info.app.build.date', new Date().format('dd.MM.yyyy HH:mm'))
    inputs.property('info.app.build.host', InetAddress.localHost.hostName)
    inputs.property('info.app.build.javaVersion', System.getProperty('java.version'))

    doLast {
        File grailsBuildInfo = it.outputs.files.files.find { it.name == 'grails.build.info' } as File
        if (! grailsBuildInfo) return

        Properties properties = new Properties()
        grailsBuildInfo.withInputStream { properties.load(it) } // read props from file

        File BuildInfoFile = new File("${project.rootDir}/git.properties")
        BuildInfoFile.withInputStream { properties.load(it) }  // read props from file

        properties.setProperty('build.time', new Date().format("dd.MM.yyyy HH:mm:ss")) // add custom props

        grailsBuildInfo.withOutputStream { properties.store(it, null) } // write back to file
    }
}
war {
    baseName = 'laser2'
    archiveName = 'laser2.war'
}
grails {
    pathingJar = true // windows limitation of command line length
}
// <--- war file ---

// ..
//tasks.withType(Test) {
//    systemProperty 'geb.env', System.getProperty('geb.env')
//    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
//    systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
//    systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
//}

// --- plugin: asset pipeline

assets {
    minifyJs = true
    minifyCss = true
    minifyOptions = [
        languageMode: 'ES6',
        targetLanguage: 'ES5_STRICT'
    ]
    skipNonDigests = true

    from '/themes'
    excludes = [
        // javascripts/*
            'libs/**',
            'modules/**',
        // themes/*
            'accessibility/**',
            'javascript/**',
            'laser/**',
        // vendor/*
            'bulma/**',
            'cryptoJS-v3.1.2/**',
            'echarts/**',
            'datatables/**',
            'select2/**/*.js',
            'select2/**/*.css',
            'swagger-ui/**',
    ]
}

// --- plugin: database migration

sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}
